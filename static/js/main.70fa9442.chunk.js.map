{"version":3,"sources":["components/EmployeeTable/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeTable","props","Table","striped","bordered","hover","variant","onClick","sortName","sortRole","employees","map","employee","src","image","alt","fullName","role","phoneNumber","email","Wrapper","className","children","Title","App","state","filteredEmployees","search","handleInputChange","event","value","target","filter","toLowerCase","startsWith","setState","sortedEmployees","sort","a","b","sortedRoles","this","name","onChange","type","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mqJAiCeA,MA7Bf,SAAuBC,GACrB,OACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QACpC,+BACE,4BACE,mCACA,wBAAIC,QAASN,EAAMO,UAAnB,QACA,wBAAID,QAASN,EAAMQ,UAAnB,QACA,4CACA,+CAGJ,+BACGR,EAAMS,UAAUC,KAAI,SAACC,GAAD,OACnB,4BACE,4BACE,yBAAKC,IAAKD,EAASE,MAAOC,IAAKH,EAASI,YAE1C,4BAAKJ,EAASI,UACd,4BAAKJ,EAASK,MACd,4BAAKL,EAASM,aACd,4BAAKN,EAASO,c,MClBXC,MAJf,SAAiBnB,GACf,OAAO,yBAAKoB,UAAU,WAAWpB,EAAMqB,W,MCG1BC,MAJf,SAAetB,GACb,OAAO,wBAAIoB,UAAU,SAASpB,EAAMqB,W,OC4DvBE,E,4MAzDbC,MAAQ,CACNf,YACAgB,kBAAmBhB,EACnBiB,OAAQ,I,EAGVC,kBAAoB,SAACC,GACnB,IAAMC,EAAQD,EAAME,OAAOD,MAErBJ,EAAoB,EAAKD,MAAMf,UAAUsB,QAAO,SAACpB,GAAD,OACpDA,EAASI,SAASiB,cAAcC,WAAWJ,EAAMG,kBAEnD,EAAKE,SAAS,CAAET,sBAEhB,EAAKS,SAAS,CACZR,OAAQG,K,EAIZtB,SAAW,WACT,IAAM4B,EAAkB,EAAKX,MAAMC,kBAAkBW,MAAK,SAACC,EAAGC,GAAJ,OACxDD,EAAEtB,SAAWuB,EAAEvB,SAAW,GAAK,KAGjC,EAAKmB,SAAS,CAAET,kBAAmBU,K,EAErC3B,SAAW,WACT,IAAM+B,EAAc,EAAKf,MAAMC,kBAAkBW,MAAK,SAACC,EAAGC,GAAJ,OACpDD,EAAErB,KAAOsB,EAAEtB,KAAO,GAAK,KAGzB,EAAKkB,SAAS,CAAET,kBAAmBc,K,uDAInC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,wBACA,0BAAMnB,UAAU,aACd,2BACES,MAAOW,KAAKhB,MAAME,OAClBe,KAAK,SACLC,SAAUF,KAAKb,kBACfgB,KAAK,OACLC,YAAY,4BAGhB,kBAAC,EAAD,CACEnC,UAAW+B,KAAKhB,MAAMC,kBACtBlB,SAAUiC,KAAKjC,SACfC,SAAUgC,KAAKhC,gB,GAnDPqC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70fa9442.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nfunction EmployeeTable(props) {\r\n  return (\r\n    <Table striped bordered hover variant=\"dark\">\r\n      <thead>\r\n        <tr>\r\n          <th>img</th>\r\n          <th onClick={props.sortName}>Name</th>\r\n          <th onClick={props.sortRole}>Role</th>\r\n          <th>Phone Number</th>\r\n          <th>Email Address</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.employees.map((employee) => (\r\n          <tr>\r\n            <td>\r\n              <img src={employee.image} alt={employee.fullName}></img>\r\n            </td>\r\n            <td>{employee.fullName}</td>\r\n            <td>{employee.role}</td>\r\n            <td>{employee.phoneNumber}</td>\r\n            <td>{employee.email}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default EmployeeTable;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\nimport EmployeeTable from \"./components/EmployeeTable\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport employees from \"./employees.json\";\n\nclass App extends React.Component {\n  state = {\n    employees,\n    filteredEmployees: employees,\n    search: \"\",\n  };\n\n  handleInputChange = (event) => {\n    const value = event.target.value;\n\n    const filteredEmployees = this.state.employees.filter((employee) =>\n      employee.fullName.toLowerCase().startsWith(value.toLowerCase())\n    );\n    this.setState({ filteredEmployees });\n\n    this.setState({\n      search: value,\n    });\n  };\n\n  sortName = () => {\n    const sortedEmployees = this.state.filteredEmployees.sort((a, b) =>\n      a.fullName > b.fullName ? 1 : -1\n    );\n\n    this.setState({ filteredEmployees: sortedEmployees });\n  };\n  sortRole = () => {\n    const sortedRoles = this.state.filteredEmployees.sort((a, b) =>\n      a.role > b.role ? 1 : -1\n    );\n\n    this.setState({ filteredEmployees: sortedRoles });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Employee Roster</Title>\n        <form className=\"form mb-3\">\n          <input\n            value={this.state.search}\n            name=\"search\"\n            onChange={this.handleInputChange}\n            type=\"text\"\n            placeholder=\"Search for an employee\"\n          />\n        </form>\n        <EmployeeTable\n          employees={this.state.filteredEmployees}\n          sortName={this.sortName}\n          sortRole={this.sortRole}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}